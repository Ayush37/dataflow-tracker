{"ast":null,"code":"import axios from'axios';const API_BASE_URL='/api';// Get list of available flows\nexport const fetchFlows=async()=>{try{const response=await axios.get(`${API_BASE_URL}/flows/`);return response.data;}catch(error){console.error('Error fetching flows:',error);throw error;}};// Get flow definition by name\nexport const fetchFlowDefinition=async flowName=>{try{const response=await axios.get(`${API_BASE_URL}/flows/${flowName}`);return response.data;}catch(error){console.error(`Error fetching flow ${flowName}:`,error);throw error;}};// Get current status for a flow\nexport const fetchFlowStatus=async flowName=>{try{const response=await axios.get(`${API_BASE_URL}/status/${flowName}`);return response.data;}catch(error){console.error(`Error fetching status for ${flowName}:`,error);throw error;}};// Get list of available configurations\nexport const fetchConfigs=async()=>{try{const response=await axios.get(`${API_BASE_URL}/configs/`);return response.data.configs;}catch(error){console.error('Error fetching configurations:',error);throw error;}};// Upload flow configuration\nexport const uploadFlowConfig=async configData=>{try{let response;if(configData instanceof File){// Upload file\nconst formData=new FormData();formData.append('file',configData);response=await axios.post(`${API_BASE_URL}/configs/`,formData,{headers:{'Content-Type':'multipart/form-data'}});}else{// Upload JSON object\nresponse=await axios.post(`${API_BASE_URL}/configs/`,configData);}return response.data;}catch(error){console.error('Error uploading configuration:',error);throw error;}};","map":{"version":3,"names":["axios","API_BASE_URL","fetchFlows","response","get","data","error","console","fetchFlowDefinition","flowName","fetchFlowStatus","fetchConfigs","configs","uploadFlowConfig","configData","File","formData","FormData","append","post","headers"],"sources":["/root/dataflow-tracker/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = '/api';\n\n// Get list of available flows\nexport const fetchFlows = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/flows/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching flows:', error);\n    throw error;\n  }\n};\n\n// Get flow definition by name\nexport const fetchFlowDefinition = async (flowName) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/flows/${flowName}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching flow ${flowName}:`, error);\n    throw error;\n  }\n};\n\n// Get current status for a flow\nexport const fetchFlowStatus = async (flowName) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/status/${flowName}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching status for ${flowName}:`, error);\n    throw error;\n  }\n};\n\n// Get list of available configurations\nexport const fetchConfigs = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/configs/`);\n    return response.data.configs;\n  } catch (error) {\n    console.error('Error fetching configurations:', error);\n    throw error;\n  }\n};\n\n// Upload flow configuration\nexport const uploadFlowConfig = async (configData) => {\n  try {\n    let response;\n    \n    if (configData instanceof File) {\n      // Upload file\n      const formData = new FormData();\n      formData.append('file', configData);\n      \n      response = await axios.post(`${API_BASE_URL}/configs/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    } else {\n      // Upload JSON object\n      response = await axios.post(`${API_BASE_URL}/configs/`, configData);\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error uploading configuration:', error);\n    throw error;\n  }\n};\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,YAAY,CAAG,MAAM,CAE3B;AACA,MAAO,MAAM,CAAAC,UAAU,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,SAAS,CAAC,CAC1D,MAAO,CAAAE,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,mBAAmB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACrD,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,UAAUQ,QAAQ,EAAE,CAAC,CACrE,MAAO,CAAAN,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBG,QAAQ,GAAG,CAAEH,KAAK,CAAC,CACxD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAI,eAAe,CAAG,KAAO,CAAAD,QAAQ,EAAK,CACjD,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,WAAWQ,QAAQ,EAAE,CAAC,CACtE,MAAO,CAAAN,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6BG,QAAQ,GAAG,CAAEH,KAAK,CAAC,CAC9D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,YAAY,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,WAAW,CAAC,CAC5D,MAAO,CAAAE,QAAQ,CAACE,IAAI,CAACO,OAAO,CAC9B,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,gBAAgB,CAAG,KAAO,CAAAC,UAAU,EAAK,CACpD,GAAI,CACF,GAAI,CAAAX,QAAQ,CAEZ,GAAIW,UAAU,WAAY,CAAAC,IAAI,CAAE,CAC9B;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEJ,UAAU,CAAC,CAEnCX,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACmB,IAAI,CAAC,GAAGlB,YAAY,WAAW,CAAEe,QAAQ,CAAE,CAChEI,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CAAC,CAAC,CACJ,CAAC,IAAM,CACL;AACAjB,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACmB,IAAI,CAAC,GAAGlB,YAAY,WAAW,CAAEa,UAAU,CAAC,CACrE,CAEA,MAAO,CAAAX,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}