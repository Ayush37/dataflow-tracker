{"ast":null,"code":"let websocket=null;export const setupWebSocket=(flowName,onMessage)=>{// Close existing connection if any\nif(websocket){websocket.close();}// Determine WebSocket URL based on current window location\nconst protocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${protocol}//${window.location.host}/ws/${flowName}`;// Create new WebSocket connection\nwebsocket=new WebSocket(wsUrl);websocket.onopen=()=>{console.log(`WebSocket connection established for ${flowName}`);};websocket.onmessage=event=>{try{const data=JSON.parse(event.data);if(onMessage&&typeof onMessage==='function'){onMessage(data);}}catch(error){console.error('Error parsing WebSocket message:',error);}};websocket.onerror=error=>{console.error('WebSocket error:',error);};websocket.onclose=()=>{console.log(`WebSocket connection closed for ${flowName}`);// Attempt to reconnect after a delay\nsetTimeout(()=>{if(websocket.readyState===WebSocket.CLOSED){setupWebSocket(flowName,onMessage);}},5000);};return websocket;};","map":{"version":3,"names":["websocket","setupWebSocket","flowName","onMessage","close","protocol","window","location","wsUrl","host","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","error","onerror","onclose","setTimeout","readyState","CLOSED"],"sources":["/root/dataflow-tracker/frontend/src/services/websocket.js"],"sourcesContent":["let websocket = null;\n\nexport const setupWebSocket = (flowName, onMessage) => {\n  // Close existing connection if any\n  if (websocket) {\n    websocket.close();\n  }\n  \n  // Determine WebSocket URL based on current window location\n  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsUrl = `${protocol}//${window.location.host}/ws/${flowName}`;\n  \n  // Create new WebSocket connection\n  websocket = new WebSocket(wsUrl);\n  \n  websocket.onopen = () => {\n    console.log(`WebSocket connection established for ${flowName}`);\n  };\n  \n  websocket.onmessage = (event) => {\n    try {\n      const data = JSON.parse(event.data);\n      if (onMessage && typeof onMessage === 'function') {\n        onMessage(data);\n      }\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  };\n  \n  websocket.onerror = (error) => {\n    console.error('WebSocket error:', error);\n  };\n  \n  websocket.onclose = () => {\n    console.log(`WebSocket connection closed for ${flowName}`);\n    \n    // Attempt to reconnect after a delay\n    setTimeout(() => {\n      if (websocket.readyState === WebSocket.CLOSED) {\n        setupWebSocket(flowName, onMessage);\n      }\n    }, 5000);\n  };\n  \n  return websocket;\n};\n"],"mappings":"AAAA,GAAI,CAAAA,SAAS,CAAG,IAAI,CAEpB,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAACC,QAAQ,CAAEC,SAAS,GAAK,CACrD;AACA,GAAIH,SAAS,CAAE,CACbA,SAAS,CAACI,KAAK,CAAC,CAAC,CACnB,CAEA;AACA,KAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ,GAAK,QAAQ,CAAG,MAAM,CAAG,KAAK,CACvE,KAAM,CAAAG,KAAK,CAAG,GAAGH,QAAQ,KAAKC,MAAM,CAACC,QAAQ,CAACE,IAAI,OAAOP,QAAQ,EAAE,CAEnE;AACAF,SAAS,CAAG,GAAI,CAAAU,SAAS,CAACF,KAAK,CAAC,CAEhCR,SAAS,CAACW,MAAM,CAAG,IAAM,CACvBC,OAAO,CAACC,GAAG,CAAC,wCAAwCX,QAAQ,EAAE,CAAC,CACjE,CAAC,CAEDF,SAAS,CAACc,SAAS,CAAIC,KAAK,EAAK,CAC/B,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC,CACnC,GAAIb,SAAS,EAAI,MAAO,CAAAA,SAAS,GAAK,UAAU,CAAE,CAChDA,SAAS,CAACa,IAAI,CAAC,CACjB,CACF,CAAE,MAAOG,KAAK,CAAE,CACdP,OAAO,CAACO,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CAC1D,CACF,CAAC,CAEDnB,SAAS,CAACoB,OAAO,CAAID,KAAK,EAAK,CAC7BP,OAAO,CAACO,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CAC1C,CAAC,CAEDnB,SAAS,CAACqB,OAAO,CAAG,IAAM,CACxBT,OAAO,CAACC,GAAG,CAAC,mCAAmCX,QAAQ,EAAE,CAAC,CAE1D;AACAoB,UAAU,CAAC,IAAM,CACf,GAAItB,SAAS,CAACuB,UAAU,GAAKb,SAAS,CAACc,MAAM,CAAE,CAC7CvB,cAAc,CAACC,QAAQ,CAAEC,SAAS,CAAC,CACrC,CACF,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED,MAAO,CAAAH,SAAS,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}