{"ast":null,"code":"// src/mocks/index.js\nimport{mockFlows,mockFlowDefinitions}from'./flowData';import{mockStatusData}from'./statusData';const USE_MOCKS=true;// Toggle for mock mode\n// Add this function to handle mock uploads\nconst addMockFlow=flowConfig=>{var _config$stageMappings,_config$stageMappings2,_config$flowDefinitio;// Parse the uploaded file or JSON object\nconst config=typeof flowConfig==='string'?JSON.parse(flowConfig):flowConfig;// Add to mockFlowDefinitions\nmockFlowDefinitions[config.flowName]={name:config.flowName,definition:{// Create a basic flow definition based on config\nnodes:[],edges:[],categories:{}},aws_mappings:((_config$stageMappings=config.stageMappings)===null||_config$stageMappings===void 0?void 0:_config$stageMappings.aws)||{},onprem_mappings:((_config$stageMappings2=config.stageMappings)===null||_config$stageMappings2===void 0?void 0:_config$stageMappings2.onPrem)||{},refresh_interval:config.refreshInterval||120};// Add to mockFlows list\nmockFlows.push({name:config.flowName,nodeCount:0,// Will be populated later\nedgeCount:0,categoryCount:Object.keys(((_config$flowDefinitio=config.flowDefinition)===null||_config$flowDefinitio===void 0?void 0:_config$flowDefinitio.subStages)||{}).length});// Add an empty status entry\nmockStatusData[config.flowName]={flow_name:config.flowName,timestamp:new Date().toISOString(),status:{}};// Parse and populate the flow definition\ntry{const categories={};const nodes=[];const edges=[];let nodeId=0;// Process categories\nObject.keys(config.flowDefinition.subStages||{}).forEach((category,catIndex)=>{const categoryId=`category-${category}`;categories[category]=[];// Add category node\nnodes.push({id:categoryId,type:\"category\",data:{label:category,stages:[]},position:{x:100+catIndex*600,y:100},style:{width:500,height:400}});// Process stages in this category\nconst stages=config.flowDefinition.subStages[category];Object.keys(stages).forEach((stageName,stageIndex)=>{const stageId=`stage-${category}-${stageName}`;categories[category].push(stageId);// Parse substages\nconst subStageStr=stages[stageName];const subStages=[];if(subStageStr.includes('->')){// Sequential substages\nsubStageStr.split('->').forEach(subStage=>{const trimmed=subStage.trim();subStages.push({id:`substage-${category}-${stageName}-${trimmed}`,name:trimmed,type:\"sequential\",status:\"pending\"});});}else if(subStageStr.includes(',')){// Parallel substages\nsubStageStr.split(',').forEach(subStage=>{const trimmed=subStage.trim();subStages.push({id:`substage-${category}-${stageName}-${trimmed}`,name:trimmed,type:\"parallel\",status:\"pending\"});});}else{// Single substage\nsubStages.push({id:`substage-${category}-${stageName}-${subStageStr.trim()}`,name:subStageStr.trim(),type:\"single\",status:\"pending\"});}// Add stage node\nnodes.push({id:stageId,type:\"stage\",data:{label:stageName,category:category,status:\"pending\",subStages:subStages},position:{x:50+stageIndex*150,y:80},parentNode:categoryId,extent:\"parent\"});// Initialize status entries for each substage\nsubStages.forEach(subStage=>{mockStatusData[config.flowName].status[subStage.name]={status:\"pending\",start_time:null,end_time:null,details:{}};});});// Add edges between stages in this category\nfor(let i=0;i<categories[category].length-1;i++){edges.push({id:`edge-${categories[category][i]}-${categories[category][i+1]}`,source:categories[category][i],target:categories[category][i+1],animated:true,type:\"smoothstep\"});}});// Add edges between categories based on overall flow\nlet lastCategoryWithStages=null;Object.keys(categories).forEach(category=>{if(categories[category].length>0){if(lastCategoryWithStages&&categories[lastCategoryWithStages].length>0){edges.push({id:`edge-${categories[lastCategoryWithStages][categories[lastCategoryWithStages].length-1]}-${categories[category][0]}`,source:categories[lastCategoryWithStages][categories[lastCategoryWithStages].length-1],target:categories[category][0],animated:true,type:\"smoothstep\"});}lastCategoryWithStages=category;}});// Update the flow definition\nmockFlowDefinitions[config.flowName].definition={nodes,edges,categories};// Update the flow summary\nconst flowIndex=mockFlows.findIndex(f=>f.name===config.flowName);if(flowIndex>=0){mockFlows[flowIndex].nodeCount=nodes.length;mockFlows[flowIndex].edgeCount=edges.length;mockFlows[flowIndex].categoryCount=Object.keys(categories).length;}return true;}catch(error){console.error(\"Error processing flow config:\",error);return false;}};export{USE_MOCKS,mockFlows,mockFlowDefinitions,mockStatusData,addMockFlow// Export the new function\n};","map":{"version":3,"names":["mockFlows","mockFlowDefinitions","mockStatusData","USE_MOCKS","addMockFlow","flowConfig","_config$stageMappings","_config$stageMappings2","_config$flowDefinitio","config","JSON","parse","flowName","name","definition","nodes","edges","categories","aws_mappings","stageMappings","aws","onprem_mappings","onPrem","refresh_interval","refreshInterval","push","nodeCount","edgeCount","categoryCount","Object","keys","flowDefinition","subStages","length","flow_name","timestamp","Date","toISOString","status","nodeId","forEach","category","catIndex","categoryId","id","type","data","label","stages","position","x","y","style","width","height","stageName","stageIndex","stageId","subStageStr","includes","split","subStage","trimmed","trim","parentNode","extent","start_time","end_time","details","i","source","target","animated","lastCategoryWithStages","flowIndex","findIndex","f","error","console"],"sources":["/root/dataflow-tracker/frontend/src/mocks/index.js"],"sourcesContent":["// src/mocks/index.js\nimport { mockFlows, mockFlowDefinitions } from './flowData';\nimport { mockStatusData } from './statusData';\n\nconst USE_MOCKS = true; // Toggle for mock mode\n\n// Add this function to handle mock uploads\nconst addMockFlow = (flowConfig) => {\n  // Parse the uploaded file or JSON object\n  const config = typeof flowConfig === 'string' ? JSON.parse(flowConfig) : flowConfig;\n  \n  // Add to mockFlowDefinitions\n  mockFlowDefinitions[config.flowName] = {\n    name: config.flowName,\n    definition: {\n      // Create a basic flow definition based on config\n      nodes: [],\n      edges: [],\n      categories: {}\n    },\n    aws_mappings: config.stageMappings?.aws || {},\n    onprem_mappings: config.stageMappings?.onPrem || {},\n    refresh_interval: config.refreshInterval || 120\n  };\n  \n  // Add to mockFlows list\n  mockFlows.push({\n    name: config.flowName,\n    nodeCount: 0, // Will be populated later\n    edgeCount: 0,\n    categoryCount: Object.keys(config.flowDefinition?.subStages || {}).length\n  });\n  \n  // Add an empty status entry\n  mockStatusData[config.flowName] = {\n    flow_name: config.flowName,\n    timestamp: new Date().toISOString(),\n    status: {}\n  };\n  \n  // Parse and populate the flow definition\n  try {\n    const categories = {};\n    const nodes = [];\n    const edges = [];\n    let nodeId = 0;\n    \n    // Process categories\n    Object.keys(config.flowDefinition.subStages || {}).forEach((category, catIndex) => {\n      const categoryId = `category-${category}`;\n      categories[category] = [];\n      \n      // Add category node\n      nodes.push({\n        id: categoryId,\n        type: \"category\",\n        data: {\n          label: category,\n          stages: []\n        },\n        position: { x: 100 + (catIndex * 600), y: 100 },\n        style: {\n          width: 500,\n          height: 400\n        }\n      });\n      \n      // Process stages in this category\n      const stages = config.flowDefinition.subStages[category];\n      Object.keys(stages).forEach((stageName, stageIndex) => {\n        const stageId = `stage-${category}-${stageName}`;\n        categories[category].push(stageId);\n        \n        // Parse substages\n        const subStageStr = stages[stageName];\n        const subStages = [];\n        \n        if (subStageStr.includes('->')) {\n          // Sequential substages\n          subStageStr.split('->').forEach((subStage) => {\n            const trimmed = subStage.trim();\n            subStages.push({\n              id: `substage-${category}-${stageName}-${trimmed}`,\n              name: trimmed,\n              type: \"sequential\",\n              status: \"pending\"\n            });\n          });\n        } else if (subStageStr.includes(',')) {\n          // Parallel substages\n          subStageStr.split(',').forEach((subStage) => {\n            const trimmed = subStage.trim();\n            subStages.push({\n              id: `substage-${category}-${stageName}-${trimmed}`,\n              name: trimmed,\n              type: \"parallel\",\n              status: \"pending\"\n            });\n          });\n        } else {\n          // Single substage\n          subStages.push({\n            id: `substage-${category}-${stageName}-${subStageStr.trim()}`,\n            name: subStageStr.trim(),\n            type: \"single\",\n            status: \"pending\"\n          });\n        }\n        \n        // Add stage node\n        nodes.push({\n          id: stageId,\n          type: \"stage\",\n          data: {\n            label: stageName,\n            category: category,\n            status: \"pending\",\n            subStages: subStages\n          },\n          position: { x: 50 + (stageIndex * 150), y: 80 },\n          parentNode: categoryId,\n          extent: \"parent\"\n        });\n        \n        // Initialize status entries for each substage\n        subStages.forEach(subStage => {\n          mockStatusData[config.flowName].status[subStage.name] = {\n            status: \"pending\",\n            start_time: null,\n            end_time: null,\n            details: {}\n          };\n        });\n      });\n      \n      // Add edges between stages in this category\n      for (let i = 0; i < categories[category].length - 1; i++) {\n        edges.push({\n          id: `edge-${categories[category][i]}-${categories[category][i+1]}`,\n          source: categories[category][i],\n          target: categories[category][i+1],\n          animated: true,\n          type: \"smoothstep\"\n        });\n      }\n    });\n    \n    // Add edges between categories based on overall flow\n    let lastCategoryWithStages = null;\n    Object.keys(categories).forEach(category => {\n      if (categories[category].length > 0) {\n        if (lastCategoryWithStages && categories[lastCategoryWithStages].length > 0) {\n          edges.push({\n            id: `edge-${categories[lastCategoryWithStages][categories[lastCategoryWithStages].length-1]}-${categories[category][0]}`,\n            source: categories[lastCategoryWithStages][categories[lastCategoryWithStages].length-1],\n            target: categories[category][0],\n            animated: true,\n            type: \"smoothstep\"\n          });\n        }\n        lastCategoryWithStages = category;\n      }\n    });\n    \n    // Update the flow definition\n    mockFlowDefinitions[config.flowName].definition = {\n      nodes,\n      edges,\n      categories\n    };\n    \n    // Update the flow summary\n    const flowIndex = mockFlows.findIndex(f => f.name === config.flowName);\n    if (flowIndex >= 0) {\n      mockFlows[flowIndex].nodeCount = nodes.length;\n      mockFlows[flowIndex].edgeCount = edges.length;\n      mockFlows[flowIndex].categoryCount = Object.keys(categories).length;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error processing flow config:\", error);\n    return false;\n  }\n};\n\nexport {\n  USE_MOCKS,\n  mockFlows,\n  mockFlowDefinitions,\n  mockStatusData,\n  addMockFlow // Export the new function\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}