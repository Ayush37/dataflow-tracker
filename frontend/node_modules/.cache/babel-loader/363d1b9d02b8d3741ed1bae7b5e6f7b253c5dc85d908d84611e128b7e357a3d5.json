{"ast":null,"code":"// components/FlowVisualizer.jsx\nimport React,{useCallback,useEffect,useState}from'react';import ReactFlow,{Background,Controls,MiniMap,useNodesState,useEdgesState,Panel,MarkerType}from'reactflow';import'reactflow/dist/style.css';import{useParams}from'react-router-dom';import{fetchFlowDefinition}from'../services/api';import{setupWebSocket}from'../services/websocket';import CategoryNode from'./nodes/CategoryNode';import StageNode from'./nodes/StageNode';// Custom node types for rendering\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const nodeTypes={category:CategoryNode,stage:StageNode};const FlowVisualizer=()=>{const{flowName}=useParams();const[nodes,setNodes,onNodesChange]=useNodesState([]);const[edges,setEdges,onEdgesChange]=useEdgesState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[lastUpdated,setLastUpdated]=useState(null);// Load flow definition\nuseEffect(()=>{const loadFlow=async()=>{try{setLoading(true);const flowData=await fetchFlowDefinition(flowName);if(flowData&&flowData.definition){setNodes(flowData.definition.nodes||[]);setEdges(flowData.definition.edges||[]);setLastUpdated(new Date());setError(null);}else{setError('Invalid flow data received');}}catch(err){setError(`Error loading flow: ${err.message}`);}finally{setLoading(false);}};if(flowName){loadFlow();}},[flowName,setNodes,setEdges]);// Set up WebSocket for real-time updates\nuseEffect(()=>{if(!flowName)return;const handleStatusUpdate=data=>{if(data.flowName!==flowName)return;// Update node status based on received data\nsetNodes(currentNodes=>{return currentNodes.map(node=>{if(node.type==='stage'){const stageName=node.data.label;if(data.stages&&data.stages[stageName]){return{...node,data:{...node.data,status:data.stages[stageName].status,startTime:data.stages[stageName].start_time,endTime:data.stages[stageName].end_time,details:data.stages[stageName].details}};}// Also update substages if present\nif(node.data.subStages&&node.data.subStages.length>0){const updatedSubStages=node.data.subStages.map(subStage=>{const subStageName=subStage.name;if(data.stages&&data.stages[subStageName]){return{...subStage,status:data.stages[subStageName].status};}return subStage;});return{...node,data:{...node.data,subStages:updatedSubStages}};}}return node;});});setLastUpdated(new Date(data.timestamp));};const ws=setupWebSocket(flowName,handleStatusUpdate);return()=>{if(ws){ws.close();}};},[flowName,setNodes]);const onLayout=useCallback(()=>{// You could implement different layout algorithms here\n},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center h-full\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-lg\",children:\"Loading flow visualization...\"})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\",children:/*#__PURE__*/_jsx(\"p\",{children:error})});}return/*#__PURE__*/_jsx(\"div\",{className:\"h-full w-full\",children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onEdgesChange:onEdgesChange,nodeTypes:nodeTypes,fitView:true,children:[/*#__PURE__*/_jsx(Controls,{}),/*#__PURE__*/_jsx(MiniMap,{}),/*#__PURE__*/_jsx(Background,{variant:\"dots\",gap:12,size:1}),/*#__PURE__*/_jsx(Panel,{position:\"top-right\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-2 rounded shadow\",children:[lastUpdated&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[\"Last updated: \",lastUpdated.toLocaleTimeString()]}),/*#__PURE__*/_jsx(\"button\",{onClick:onLayout,className:\"bg-blue-500 text-white px-3 py-1 rounded text-sm mt-1\",children:\"Layout\"})]})})]})});};export default FlowVisualizer;","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","Panel","MarkerType","useParams","fetchFlowDefinition","setupWebSocket","CategoryNode","StageNode","jsx","_jsx","jsxs","_jsxs","nodeTypes","category","stage","FlowVisualizer","flowName","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","loading","setLoading","error","setError","lastUpdated","setLastUpdated","loadFlow","flowData","definition","Date","err","message","handleStatusUpdate","data","currentNodes","map","node","type","stageName","label","stages","status","startTime","start_time","endTime","end_time","details","subStages","length","updatedSubStages","subStage","subStageName","name","timestamp","ws","close","onLayout","className","children","fitView","variant","gap","size","position","toLocaleTimeString","onClick"],"sources":["/root/dataflow-tracker/frontend/src/components/FlowVisualizer.jsx"],"sourcesContent":["// components/FlowVisualizer.jsx\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ReactFlow, {\n  Background,\n  Controls,\n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  Panel,\n  MarkerType\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { useParams } from 'react-router-dom';\nimport { fetchFlowDefinition } from '../services/api';\nimport { setupWebSocket } from '../services/websocket';\nimport CategoryNode from './nodes/CategoryNode';\nimport StageNode from './nodes/StageNode';\n\n// Custom node types for rendering\nconst nodeTypes = {\n  category: CategoryNode,\n  stage: StageNode\n};\n\nconst FlowVisualizer = () => {\n  const { flowName } = useParams();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  // Load flow definition\n  useEffect(() => {\n    const loadFlow = async () => {\n      try {\n        setLoading(true);\n        const flowData = await fetchFlowDefinition(flowName);\n        \n        if (flowData && flowData.definition) {\n          setNodes(flowData.definition.nodes || []);\n          setEdges(flowData.definition.edges || []);\n          setLastUpdated(new Date());\n          setError(null);\n        } else {\n          setError('Invalid flow data received');\n        }\n      } catch (err) {\n        setError(`Error loading flow: ${err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (flowName) {\n      loadFlow();\n    }\n  }, [flowName, setNodes, setEdges]);\n\n  // Set up WebSocket for real-time updates\n  useEffect(() => {\n    if (!flowName) return;\n\n    const handleStatusUpdate = (data) => {\n      if (data.flowName !== flowName) return;\n\n      // Update node status based on received data\n      setNodes((currentNodes) => {\n        return currentNodes.map(node => {\n          if (node.type === 'stage') {\n            const stageName = node.data.label;\n            \n            if (data.stages && data.stages[stageName]) {\n              return {\n                ...node,\n                data: {\n                  ...node.data,\n                  status: data.stages[stageName].status,\n                  startTime: data.stages[stageName].start_time,\n                  endTime: data.stages[stageName].end_time,\n                  details: data.stages[stageName].details\n                }\n              };\n            }\n            \n            // Also update substages if present\n            if (node.data.subStages && node.data.subStages.length > 0) {\n              const updatedSubStages = node.data.subStages.map(subStage => {\n                const subStageName = subStage.name;\n                if (data.stages && data.stages[subStageName]) {\n                  return {\n                    ...subStage,\n                    status: data.stages[subStageName].status\n                  };\n                }\n                return subStage;\n              });\n              \n              return {\n                ...node,\n                data: {\n                  ...node.data,\n                  subStages: updatedSubStages\n                }\n              };\n            }\n          }\n          return node;\n        });\n      });\n      \n      setLastUpdated(new Date(data.timestamp));\n    };\n\n    const ws = setupWebSocket(flowName, handleStatusUpdate);\n    \n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [flowName, setNodes]);\n\n  const onLayout = useCallback(() => {\n    // You could implement different layout algorithms here\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-lg\">Loading flow visualization...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full w-full\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n      >\n        <Controls />\n        <MiniMap />\n        <Background variant=\"dots\" gap={12} size={1} />\n        <Panel position=\"top-right\">\n          <div className=\"bg-white p-2 rounded shadow\">\n            {lastUpdated && (\n              <div className=\"text-sm text-gray-600\">\n                Last updated: {lastUpdated.toLocaleTimeString()}\n              </div>\n            )}\n            <button\n              onClick={onLayout}\n              className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm mt-1\"\n            >\n              Layout\n            </button>\n          </div>\n        </Panel>\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default FlowVisualizer;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}