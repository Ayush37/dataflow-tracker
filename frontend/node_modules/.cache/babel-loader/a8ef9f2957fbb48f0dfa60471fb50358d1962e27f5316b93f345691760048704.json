{"ast":null,"code":"// services/websocket.js\nimport{USE_MOCKS,mockStatusData}from'../mocks';let websocket=null;let mockInterval=null;export const setupWebSocket=(flowName,onMessage)=>{// If using mocks, set up a simulated WebSocket with interval updates\nif(USE_MOCKS){console.log(`Setting up mock WebSocket for ${flowName}`);// Clear any existing mock interval\nif(mockInterval){clearInterval(mockInterval);}// Create a mock WebSocket that sends updates every 5 seconds\nmockInterval=setInterval(()=>{if(mockStatusData[flowName]){// Update the timestamp\nconst mockData={...mockStatusData[flowName],timestamp:new Date().toISOString()};// Simulate stage progression\nif(mockData.status['Stage1_2']&&mockData.status['Stage1_2'].status==='running'){// Randomly complete Stage1_2 and start Stage1_3\nif(Math.random()>0.7){mockData.status['Stage1_2'].status='completed';mockData.status['Stage1_2'].end_time=new Date().toISOString();mockData.status['Stage1_3'].status='running';mockData.status['Stage1_3'].start_time=new Date().toISOString();}}else if(mockData.status['Stage1_3']&&mockData.status['Stage1_3'].status==='running'){// Randomly complete Stage1_3 and start Stage_2\nif(Math.random()>0.7){mockData.status['Stage1_3'].status='completed';mockData.status['Stage1_3'].end_time=new Date().toISOString();mockData.status['Stage_2'].status='running';mockData.status['Stage_2'].start_time=new Date().toISOString();}}// Send the mock update\nonMessage(mockData);}},5000);return{close:()=>{if(mockInterval){clearInterval(mockInterval);mockInterval=null;}}};}// Regular WebSocket code for non-mock mode\n// Close existing connection if any\nif(websocket){websocket.close();}// Determine WebSocket URL based on current window location\nconst protocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${protocol}//${window.location.host}/ws/${flowName}`;// Create new WebSocket connection\nwebsocket=new WebSocket(wsUrl);websocket.onopen=()=>{console.log(`WebSocket connection established for ${flowName}`);};websocket.onmessage=event=>{try{const data=JSON.parse(event.data);if(onMessage&&typeof onMessage==='function'){onMessage(data);}}catch(error){console.error('Error parsing WebSocket message:',error);}};websocket.onerror=error=>{console.error('WebSocket error:',error);};websocket.onclose=()=>{console.log(`WebSocket connection closed for ${flowName}`);// Attempt to reconnect after a delay\nsetTimeout(()=>{if(websocket.readyState===WebSocket.CLOSED){setupWebSocket(flowName,onMessage);}},5000);};return websocket;};","map":{"version":3,"names":["USE_MOCKS","mockStatusData","websocket","mockInterval","setupWebSocket","flowName","onMessage","console","log","clearInterval","setInterval","mockData","timestamp","Date","toISOString","status","Math","random","end_time","start_time","close","protocol","window","location","wsUrl","host","WebSocket","onopen","onmessage","event","data","JSON","parse","error","onerror","onclose","setTimeout","readyState","CLOSED"],"sources":["/root/dataflow-tracker/frontend/src/services/websocket.js"],"sourcesContent":["// services/websocket.js\nimport { USE_MOCKS, mockStatusData } from '../mocks';\n\nlet websocket = null;\nlet mockInterval = null;\n\nexport const setupWebSocket = (flowName, onMessage) => {\n  // If using mocks, set up a simulated WebSocket with interval updates\n  if (USE_MOCKS) {\n    console.log(`Setting up mock WebSocket for ${flowName}`);\n    \n    // Clear any existing mock interval\n    if (mockInterval) {\n      clearInterval(mockInterval);\n    }\n    \n    // Create a mock WebSocket that sends updates every 5 seconds\n    mockInterval = setInterval(() => {\n      if (mockStatusData[flowName]) {\n        // Update the timestamp\n        const mockData = {\n          ...mockStatusData[flowName],\n          timestamp: new Date().toISOString()\n        };\n        \n        // Simulate stage progression\n        if (mockData.status['Stage1_2'] && mockData.status['Stage1_2'].status === 'running') {\n          // Randomly complete Stage1_2 and start Stage1_3\n          if (Math.random() > 0.7) {\n            mockData.status['Stage1_2'].status = 'completed';\n            mockData.status['Stage1_2'].end_time = new Date().toISOString();\n            mockData.status['Stage1_3'].status = 'running';\n            mockData.status['Stage1_3'].start_time = new Date().toISOString();\n          }\n        } else if (mockData.status['Stage1_3'] && mockData.status['Stage1_3'].status === 'running') {\n          // Randomly complete Stage1_3 and start Stage_2\n          if (Math.random() > 0.7) {\n            mockData.status['Stage1_3'].status = 'completed';\n            mockData.status['Stage1_3'].end_time = new Date().toISOString();\n            mockData.status['Stage_2'].status = 'running';\n            mockData.status['Stage_2'].start_time = new Date().toISOString();\n          }\n        }\n        \n        // Send the mock update\n        onMessage(mockData);\n      }\n    }, 5000);\n    \n    return {\n      close: () => {\n        if (mockInterval) {\n          clearInterval(mockInterval);\n          mockInterval = null;\n        }\n      }\n    };\n  }\n  \n  // Regular WebSocket code for non-mock mode\n  // Close existing connection if any\n  if (websocket) {\n    websocket.close();\n  }\n  \n  // Determine WebSocket URL based on current window location\n  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsUrl = `${protocol}//${window.location.host}/ws/${flowName}`;\n  \n  // Create new WebSocket connection\n  websocket = new WebSocket(wsUrl);\n  \n  websocket.onopen = () => {\n    console.log(`WebSocket connection established for ${flowName}`);\n  };\n  \n  websocket.onmessage = (event) => {\n    try {\n      const data = JSON.parse(event.data);\n      if (onMessage && typeof onMessage === 'function') {\n        onMessage(data);\n      }\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  };\n  \n  websocket.onerror = (error) => {\n    console.error('WebSocket error:', error);\n  };\n  \n  websocket.onclose = () => {\n    console.log(`WebSocket connection closed for ${flowName}`);\n    \n    // Attempt to reconnect after a delay\n    setTimeout(() => {\n      if (websocket.readyState === WebSocket.CLOSED) {\n        setupWebSocket(flowName, onMessage);\n      }\n    }, 5000);\n  };\n  \n  return websocket;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}