{"ast":null,"code":"// services/api.js\nimport axios from'axios';import{USE_MOCKS,mockFlows,mockFlowDefinitions,mockStatusData}from'../mocks';const API_BASE_URL='/api';// Get list of available flows\nexport const fetchFlows=async()=>{if(USE_MOCKS){console.log(\"Using mock data for flows\");return mockFlows;}try{const response=await axios.get(`${API_BASE_URL}/flows/`);return Array.isArray(response.data)?response.data:[];}catch(error){console.error('Error fetching flows:',error);return[];}};// Get flow definition by name\nexport const fetchFlowDefinition=async flowName=>{if(USE_MOCKS){console.log(`Using mock data for flow definition: ${flowName}`);return mockFlowDefinitions[flowName]||null;}try{const response=await axios.get(`${API_BASE_URL}/flows/${flowName}`);return response.data;}catch(error){console.error(`Error fetching flow ${flowName}:`,error);throw error;}};// Get current status for a flow\nexport const fetchFlowStatus=async flowName=>{if(USE_MOCKS){console.log(`Using mock data for flow status: ${flowName}`);return mockStatusData[flowName]||null;}try{const response=await axios.get(`${API_BASE_URL}/status/${flowName}`);return response.data;}catch(error){console.error(`Error fetching status for ${flowName}:`,error);throw error;}};// Get list of available configurations\nexport const fetchConfigs=async()=>{if(USE_MOCKS){console.log(\"Using mock data for configs\");return Object.keys(mockFlowDefinitions).map(name=>`${name.toLowerCase()}.json`);}try{const response=await axios.get(`${API_BASE_URL}/configs/`);return response.data.configs;}catch(error){console.error('Error fetching configurations:',error);throw error;}};// Upload flow configuration\nexport const uploadFlowConfig=async configData=>{if(USE_MOCKS){console.log(\"Mock: Upload flow config\",configData);return{status:\"success\",message:\"Configuration uploaded (mock)\"};}try{let response;if(configData instanceof File){// Upload file\nconst formData=new FormData();formData.append('file',configData);response=await axios.post(`${API_BASE_URL}/configs/`,formData,{headers:{'Content-Type':'multipart/form-data'}});}else{// Upload JSON object\nresponse=await axios.post(`${API_BASE_URL}/configs/`,configData);}return response.data;}catch(error){console.error('Error uploading configuration:',error);throw error;}};","map":{"version":3,"names":["axios","USE_MOCKS","mockFlows","mockFlowDefinitions","mockStatusData","API_BASE_URL","fetchFlows","console","log","response","get","Array","isArray","data","error","fetchFlowDefinition","flowName","fetchFlowStatus","fetchConfigs","Object","keys","map","name","toLowerCase","configs","uploadFlowConfig","configData","status","message","File","formData","FormData","append","post","headers"],"sources":["/root/dataflow-tracker/frontend/src/services/api.js"],"sourcesContent":["// services/api.js\nimport axios from 'axios';\nimport { USE_MOCKS, mockFlows, mockFlowDefinitions, mockStatusData } from '../mocks';\n\nconst API_BASE_URL = '/api';\n\n// Get list of available flows\nexport const fetchFlows = async () => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock data for flows\");\n    return mockFlows;\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/flows/`);\n    return Array.isArray(response.data) ? response.data : [];\n  } catch (error) {\n    console.error('Error fetching flows:', error);\n    return [];\n  }\n};\n\n// Get flow definition by name\nexport const fetchFlowDefinition = async (flowName) => {\n  if (USE_MOCKS) {\n    console.log(`Using mock data for flow definition: ${flowName}`);\n    return mockFlowDefinitions[flowName] || null;\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/flows/${flowName}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching flow ${flowName}:`, error);\n    throw error;\n  }\n};\n\n// Get current status for a flow\nexport const fetchFlowStatus = async (flowName) => {\n  if (USE_MOCKS) {\n    console.log(`Using mock data for flow status: ${flowName}`);\n    return mockStatusData[flowName] || null;\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/status/${flowName}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching status for ${flowName}:`, error);\n    throw error;\n  }\n};\n\n// Get list of available configurations\nexport const fetchConfigs = async () => {\n  if (USE_MOCKS) {\n    console.log(\"Using mock data for configs\");\n    return Object.keys(mockFlowDefinitions).map(name => `${name.toLowerCase()}.json`);\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/configs/`);\n    return response.data.configs;\n  } catch (error) {\n    console.error('Error fetching configurations:', error);\n    throw error;\n  }\n};\n\n// Upload flow configuration\nexport const uploadFlowConfig = async (configData) => {\n  if (USE_MOCKS) {\n    console.log(\"Mock: Upload flow config\", configData);\n    return { status: \"success\", message: \"Configuration uploaded (mock)\" };\n  }\n  \n  try {\n    let response;\n    \n    if (configData instanceof File) {\n      // Upload file\n      const formData = new FormData();\n      formData.append('file', configData);\n      \n      response = await axios.post(`${API_BASE_URL}/configs/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    } else {\n      // Upload JSON object\n      response = await axios.post(`${API_BASE_URL}/configs/`, configData);\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error uploading configuration:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}